[project]
name = "uv-project-ty-ruff-github"
version = "0.1.0"
description = "Awesome `uv-project-ty-ruff-github` project!"
readme = "README.md"
authors = [
  {name = "Awesome user", email = "awesome-user@example.com"}
]
requires-python = ">=3.12"

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Programming Language :: Python :: 3",
]

dependencies = [
    "pydantic-settings>=2.10.1",
]

[build-system]
requires = ["uv_build>=0.8.10,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "uv_project_ty_ruff_github"
module-root = ""

[dependency-groups]
dev = [
    "python-dotenv>=1.1.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "envyaml>=1.10",
    "ruff>=0.12.9",
    "ty>=0.0.1a19",
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "jupyter-client==6.1.12",
    "jupyter-contrib-nbextensions>=0.5.1",
    "nbconvert==5.6.1",
    "jinja2==3.0.3",
    "nbdime>=4.0.2",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/#pyflakes-f
select = ["ALL"]
ignore = [
  "ANN",
  "G004",
  "D401",
  "RET504",
  "ISC001",
]

exclude = [
  ".additional/*"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "D", "INP001"]
"uv_project_ty_ruff_github/__init__.py" = ["D400", "D103"]
"scripts/*" = ["BLE001", "D", "INP001", "LOG"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"






[tool.ty.src]
include = [
  "uv_project_ty_ruff_github"
]

[tool.ty.environment]
python = "./.venv"
python-version = "3.12"


[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]
