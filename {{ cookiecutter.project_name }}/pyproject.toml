{%- set python_version_splitted = cookiecutter.minimal_python_version.split('.') | map('int') | list -%}
{%- set merged_python_version = cookiecutter.minimal_python_version.replace('.', '') -%}
{%- set username = cookiecutter.username.replace(" ", "-") -%}
{%- if cookiecutter.vcs_remote_type == "bitbucket" -%}
  {%- set vcs_domen = "org" -%}
{%- else -%}
  {%- set vcs_domen = "com" -%}
{%- endif -%}
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = ["{{ cookiecutter.username }} <{{ cookiecutter.email }}>"]
repository = "https://{{ cookiecutter.vcs_remote_type }}.{{ vcs_domen }}/{{ username }}/{{ cookiecutter.project_name }}/"
homepage = "https://{{ cookiecutter.vcs_remote_type }}.{{ vcs_domen }}/{{ username }}/{{ cookiecutter.project_name }}/"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Programming Language :: Python :: 3",
  {%- for minor_version in cookiecutter._all_python_minor_version if minor_version == python_version_splitted[1] %}
  "Programming Language :: Python :: 3.{{ minor_version }}",{% endfor %}
]

{% if cookiecutter.include_cli_example == 'y' %}
[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.project_name }}" = "{{ cookiecutter.project_slug }}.__main__:app"
{% endif %}

[tool.poetry.dependencies]
python = "~{{ cookiecutter.minimal_python_version }}.0"
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^10.7.0"
python-dotenv = "^0.21.1"

[tool.poetry.group.dev.dependencies]
wemake-python-styleguide = "^0.17.0"
black = {version = "^23.3", allow-prereleases = true}
isort = {extras = ["colors"], version = "^5.10.1"}
{% if cookiecutter.include_mypy_type_checker == 'y' -%}mypy = "^1.8.0"
mypy-extensions = "^1.0.0"{%- endif %}
pre-commit = "^2.14.0"
{% if cookiecutter.include_tests_sample == 'y' -%}pytest = "^6.2.4"{%- endif %}
nbdime = "^3.1.0"
envyaml = "^1.9.210927"
{% if cookiecutter.include_notebooks_sample == 'y' %}
ipykernel = "^6.4.2"
jupyter = "^1.0.0"
jupyter_contrib_nbextensions = "^0.5.1"
jupyter-client = "==6.1.12"
nbconvert = "5.6.1"
jinja2 = "3.0.3"
{% endif %}

{% if cookiecutter.python_formatter == 'black' %}
[tool.black]
# https://github.com/psf/black
target-version = ["py{{ merged_python_version }}"]
line-length = {{ cookiecutter.line_length }}
color = true

exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | env
    | venv
)/
'''
{% endif %}

{% if cookiecutter.python_linter == 'flake8' %}
[tool.isort]
# https://github.com/timothycrosley/isort/
py_version = {{ merged_python_version }}
line_length = {{ cookiecutter.line_length }}

known_typing = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]
sections = ["FUTURE", "TYPING", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
profile = "black"
multi_line_output = 3
indent = 4
color_output = true
{% endif %}

{% if cookiecutter.include_mypy_type_checker == 'y' %}
[tool.mypy]
# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
python_version = "{{ cookiecutter.minimal_python_version }}"
pretty = true
show_traceback = true
color_output = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
ignore_missing_imports = true
implicit_reexport = false
no_implicit_optional = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
{% endif %}

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]
