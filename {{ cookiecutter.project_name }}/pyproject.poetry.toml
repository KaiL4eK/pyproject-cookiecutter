{%- set python_version_splitted = cookiecutter.minimal_python_version.split('.') | map('int') | list -%}
{%- set merged_python_version = cookiecutter.minimal_python_version.replace('.', '') -%}
{%- set username = cookiecutter.username.replace(" ", "-") -%}
{%- if cookiecutter.vcs_remote_type == "bitbucket" -%}
  {%- set vcs_domen = "org" -%}
{%- else -%}
  {%- set vcs_domen = "com" -%}
{%- endif -%}
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = ["{{ cookiecutter.username }} <{{ cookiecutter.email }}>"]
repository = "https://{{ cookiecutter.vcs_remote_type }}.{{ vcs_domen }}/{{ username }}/{{ cookiecutter.project_name }}/"
homepage = "https://{{ cookiecutter.vcs_remote_type }}.{{ vcs_domen }}/{{ username }}/{{ cookiecutter.project_name }}/"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Programming Language :: Python :: 3",
  {%- for minor_version in cookiecutter._all_python_minor_version if minor_version == python_version_splitted[1] -%}
  "Programming Language :: Python :: 3.{{ minor_version }}",{% endfor %}
]

{% if cookiecutter.minimal_python_version == '3.8' -%}
# Just a fix for https://github.com/python-poetry/poetry/issues/9293
[[tool.poetry.source]]
name = "pypi-public"
url = "https://pypi.org/simple/"
{% endif %}

{% if cookiecutter.include_cli_example == 'y' %}
[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.project_name }}" = "{{ cookiecutter.project_slug }}.__main__:app"
{% endif %}

[tool.poetry.dependencies]
python = "~{{ cookiecutter.minimal_python_version }}.0"
python-dotenv = "^1.0.1"
{% if cookiecutter.include_cli_example == 'y' %}
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^10.7.0"
{% endif %}

[tool.poetry.group.dev.dependencies]
# In case of packages without patch part we just want to update them through minor versions
pre-commit = "^4.3.0"
pytest = "^8.4"
{% if cookiecutter.python_linter == 'wemake' -%}
wemake-python-styleguide = "^1.3"
{% endif -%}
{% if cookiecutter.python_linter == 'flake8' -%}
flake8 = "^7.3"
{% endif -%}
{% if cookiecutter.python_formatter == 'black' -%}
black = "^25.1"
{% endif -%}
{% if cookiecutter.python_formatter != 'ruff' -%}
isort = {extras = ["colors"], version = "^6.0"}
{% endif -%}
{% if cookiecutter.python_formatter == 'ruff' or cookiecutter.python_linter == 'ruff' -%}
ruff = "^0.12"
{% endif -%}
{% if cookiecutter.python_type_checker == 'mypy' -%}
mypy = "^1.17"
{% elif cookiecutter.python_type_checker == 'ty' -%}
ty = "^0.0.1a19"
{% endif -%}
{% if cookiecutter.include_notebooks_sample == 'y' -%}
ipykernel = "^6.29.5"
jupyter = "^1.1.1"
jupyter-client = "==6.1.12"
jupyter_contrib_nbextensions = "^0.5.1"
nbconvert = "5.6.1"
jinja2 = "3.1.6"
nbdime = "^4.0.2"
{% endif -%}
