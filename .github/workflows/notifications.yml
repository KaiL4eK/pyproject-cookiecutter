name: Notify Telegram

on:
  workflow_dispatch: {}
  issues:
    types: [opened, reopened, closed, assigned, labeled, unlabeled]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, reopened, closed, ready_for_review, review_requested, converted_to_draft]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  discussion:
    types: [created, edited, answered, pinned, unpinned]
  discussion_comment:
    types: [created]
  release:
    types: [published]
  workflow_run:
    workflows: ["Test project creation"] # –ù–∞–∑–≤–∞–Ω–∏—è workflows, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥–∏–º
    types: [completed]

permissions:
  contents: read

jobs:
  notify:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.eventName;
            const p = context.payload;
            const {owner, repo} = context.repo;

            // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram parse_mode=HTML
            const escHtml = (s='') => String(s)
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;');

            const trim = (s = '', max = 3500) =>
              (s.length > max) ? (s.slice(0, max - 1) + '‚Ä¶') : s;

            const actor = p.sender?.login || context.actor || 'unknown';
            let title = '', url = '', body = '';

            if (event === 'workflow_dispatch') {
              title = 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
              url = `https://github.com/${owner}/${repo}/actions`;
              body = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.';
            } else if (event === 'workflow_run') {
              const wr = p.workflow_run;
              if (!wr || wr.conclusion !== 'failure') {
                core.setOutput('skip', 'true'); return; // —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ –ø–∞–¥–µ–Ω–∏—è—Ö
              }
              const name = p.workflow?.name || wr.name || 'Workflow';
              title = `‚ùå –£–ø–∞–ª workflow: ${name}`;
              url = wr.html_url;

              // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              let dur = '';
              try {
                const start = new Date(wr.run_started_at).getTime();
                const end   = new Date(wr.updated_at || wr.created_at).getTime();
                const sec = Math.max(0, Math.round((end - start)/1000));
                const m = Math.floor(sec / 60), s = sec % 60;
                dur = `${m}m ${s}s`;
              } catch (_) {}

              const head = [
                `Branch: ${wr.head_branch}`,
                `Conclusion: ${wr.conclusion}`,
                dur ? `Duration: ${dur}` : null,
                `Event: ${wr.event}`
              ].filter(Boolean).join('\n');

              const commitMsg = wr.head_commit?.message || '';
              body = [head, '', commitMsg].join('\n');
            } else {
              switch (event) {
                case 'issues':
                  title = `üÜï Issue ${p.action}: #${p.issue.number} ${p.issue.title}`;
                  url   = p.issue.html_url;
                  body  = p.issue.body || '';
                  break;
                case 'issue_comment':
                  title = `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ issue #${p.issue.number} –æ—Ç ${p.comment.user.login}`;
                  url   = p.comment.html_url;
                  body  = p.comment.body || '';
                  break;
                case 'pull_request':
                  title = `üîÄ PR ${p.action}: #${p.pull_request.number} ${p.pull_request.title}`;
                  url   = p.pull_request.html_url;
                  body  = p.pull_request.body || '';
                  break;
                case 'pull_request_review':
                  title = `üìù Review ${p.action} PR #${p.pull_request.number} –æ—Ç ${p.review.user.login}`;
                  url   = p.review.html_url || p.pull_request.html_url;
                  body  = p.review.body || '';
                  break;
                case 'pull_request_review_comment':
                  title = `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR #${p.pull_request.number} –æ—Ç ${p.comment.user.login}`;
                  url   = p.comment.html_url;
                  body  = p.comment.body || '';
                  break;
                case 'discussion':
                case 'discussion_comment':
                  title = `üí¨ Discussion ${p.action}: ${p.discussion.title}`;
                  url   = p.discussion.html_url;
                  body  = (p.comment && p.comment.body) || p.discussion.body || '';
                  break;
                case 'release':
                  title = `üè∑Ô∏è Release ${p.action}: ${p.release.tag_name}`;
                  url   = p.release.html_url;
                  body  = p.release.body || '';
                  break;
                default:
                  title = `üì£ ${event} ${p.action || ''}`.trim();
                  url   = `https://github.com/${owner}/${repo}`;
                  body  = '';
              }
            }

            const footer = `Repo: ${owner}/${repo}\nby ${actor}`;
            const html = [
              `<b>${escHtml(title || '–°–æ–±—ã—Ç–∏–µ')}</b>`,
              '',
              escHtml(footer),
              body ? '' : null,
              body ? escHtml(trim(body, 3200)) : null,
              '',
              url ? `<a href="${escHtml(url)}">–û—Ç–∫—Ä—ã—Ç—å –≤ GitHub</a>` : null
            ].filter(Boolean).join('\n');

            core.setOutput('message', html);
            core.setOutput('skip', 'false');

      - name: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram (JSON, HTML)
        if: steps.build.outputs.skip != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -euo pipefail
          API_URL="https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage"
          # –°–æ–±–∏—Ä–∞–µ–º JSON —á–µ—Ä–µ–∑ jq, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –∫–∞–≤—ã—á–∫–∏
          payload="$(jq -n \
            --arg chat_id "$TELEGRAM_CHAT_ID" \
            --arg text    "${{ steps.build.outputs.message }}" \
            '{chat_id: $chat_id, text: $text, parse_mode: "HTML", disable_web_page_preview: true}')"
          curl -sS -H "Content-Type: application/json" -X POST "$API_URL" -d "$payload" \
            | jq -r '.ok as $ok | if $ok then "sent" else ( .description // "unknown error") end'
