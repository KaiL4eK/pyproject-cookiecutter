name: Notify Telegram

on:
  issues:
    types: [opened, reopened, closed, assigned, labeled, unlabeled]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, reopened, closed, ready_for_review, review_requested, converted_to_draft]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]
  discussion:
    types: [created, edited, answered, pinned, unpinned]
  discussion_comment:
    types: [created]
  release:
    types: [published]
  workflow_run:
    workflows: ["Test project creation"] # –ù–∞–∑–≤–∞–Ω–∏—è workflows, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–ª–µ–¥–∏–º
    types: [completed]

permissions:
  contents: read

jobs:
  notify:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const event = context.eventName;
            const p = context.payload;
            const {owner, repo} = context.repo;

            const esc = (s='') =>
              String(s).replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1');

            let title = '', url = '', body = '';

            if (event === 'workflow_run') {
              if (p.workflow_run.conclusion !== 'failure') {
                core.setOutput('skip', 'true');
                return;
              }
              title = `‚ùå Workflow "${p.workflow.name}" —É–ø–∞–ª`;
              url = p.workflow_run.html_url;
              body = `Branch: ${p.workflow_run.head_branch}\nCommit: ${p.workflow_run.head_commit.message}`;
            } else {
              switch (event) {
                case 'issues':
                  title = `üÜï Issue ${p.action}: #${p.issue.number} ${p.issue.title}`;
                  url   = p.issue.html_url;
                  body  = p.issue.body || '';
                  break;
                case 'issue_comment':
                  title = `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ issue #${p.issue.number} –æ—Ç ${p.comment.user.login}`;
                  url   = p.comment.html_url;
                  body  = p.comment.body || '';
                  break;
                case 'pull_request':
                  title = `üîÄ PR ${p.action}: #${p.pull_request.number} ${p.pull_request.title}`;
                  url   = p.pull_request.html_url;
                  body  = p.pull_request.body || '';
                  break;
                case 'pull_request_review':
                  title = `üìù Review ${p.action} PR #${p.pull_request.number} –æ—Ç ${p.review.user.login}`;
                  url   = p.review.html_url || p.pull_request.html_url;
                  body  = p.review.body || '';
                  break;
                case 'pull_request_review_comment':
                  title = `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR #${p.pull_request.number} –æ—Ç ${p.comment.user.login}`;
                  url   = p.comment.html_url;
                  body  = p.comment.body || '';
                  break;
                case 'discussion':
                case 'discussion_comment':
                  title = `üí¨ Discussion ${p.action}: ${p.discussion.title}`;
                  url   = p.discussion.html_url;
                  body  = (p.comment && p.comment.body) || p.discussion.body || '';
                  break;
                case 'release':
                  title = `üè∑Ô∏è Release ${p.action}: ${p.release.tag_name}`;
                  url   = p.release.html_url;
                  body  = p.release.body || '';
                  break;
                default:
                  title = `üì£ ${event} ${p.action || ''}`.trim();
                  url   = `https://github.com/${owner}/${repo}`;
                  body  = '';
              }
            }

            const maxBody = 900;
            const actor = context.actor;

            const message = [
              `*${esc(title)}*`,
              '',
              `Repo: ${esc(owner)}/${esc(repo)}`,
              `by ${esc(actor)}`,
              body ? '' : null,
              body ? esc(body).slice(0, maxBody) : null,
              '',
              esc(url)
            ].filter(Boolean).join('\n');

            core.setOutput('message', message);

      - name: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
        if: steps.build.outputs.skip != 'true'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -sS "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
            --data-urlencode "text=${{ steps.build.outputs.message }}" \
            --data-urlencode "parse_mode=MarkdownV2" \
            --data "disable_web_page_preview=true"
